import os
import cv2
import time
import fcntl
import v4l2
import logging
import numpy as np
import requests
from datetime import datetime
from telegram_bot import TelegramBot  

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger('object_detector')

class VirtualCameraObjectDetector:
    def __init__(self, width=640, height=480, input_device_index=0, output_device="/dev/video2", 
                 tts_url="http://127.0.0.1:5000/audio/speak", 
                 enable_telegram=True, photo_interval=30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–æ–π
        
        Args:
            width (int): –®–∏—Ä–∏–Ω–∞ –∫–∞–¥—Ä–∞
            height (int): –í—ã—Å–æ—Ç–∞ –∫–∞–¥—Ä–∞
            input_device_index (int): –ò–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
            output_device (str): –ü—É—Ç—å –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
            tts_url (str): URL TTS —Å–µ—Ä–≤–µ—Ä–∞
            enable_telegram (bool): –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            photo_interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ñ–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.width = width
        self.height = height
        self.input_device_index = int(input_device_index)
        self.output_device = output_device
        self.tts_url = "https://192.168.0.38:5000/audio/speak"
        self.running = False
        self.fd_out = None
        self.cap = None

        # --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è TTS –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ---
        self.dog_detected_recently = False
        self.cat_detected_recently = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∫–æ—Ç–∞
        
        # --- Telegram Bot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ---
        self.telegram_bot = None
        self.photo_interval = photo_interval  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ñ–æ—Ç–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_dog_photo_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏
        self.last_cat_photo_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
        if enable_telegram:
            try:
                self.telegram_bot = TelegramBot()
                logger.info("Telegram Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot: {e}")
                self.telegram_bot = None
        else:
            logger.info("Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        prototxt_path = '../models/MobileNetSSD_deploy.prototxt'
        model_path = '../models/MobileNetSSD_deploy.caffemodel'
        self.net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)
        self.CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]
        
        self._initialize_camera()
        self._initialize_virtual_device()

    def _initialize_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        self.cap = cv2.VideoCapture(self.input_device_index)
        if not self.cap.isOpened():
            raise IOError(f"Cannot open camera with index {self.input_device_index}")
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, float(self.width))
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, float(self.height))
        self.cap.set(cv2.CAP_PROP_FPS, 30.0)
        logger.info(f"Camera {self.input_device_index} initialized.")

    def _initialize_virtual_device(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞"""
        if not os.path.exists(self.output_device):
            raise FileNotFoundError(f"Device not found: {self.output_device}")
        self.fd_out = os.open(self.output_device, os.O_RDWR)
        
        format = v4l2.v4l2_format()
        format.type = v4l2.V4L2_BUF_TYPE_VIDEO_OUTPUT
        format.fmt.pix.width = self.width
        format.fmt.pix.height = self.height
        format.fmt.pix.pixelformat = v4l2.V4L2_PIX_FMT_YUV420
        format.fmt.pix.bytesperline = self.width
        format.fmt.pix.sizeimage = int(self.width * self.height * 1.5)
        format.fmt.pix.field = v4l2.V4L2_FIELD_NONE
        
        try:
            fcntl.ioctl(self.fd_out, v4l2.VIDIOC_S_FMT, format)
            logger.info(f"Virtual camera format set to YUV420 on {self.output_device}")
        except Exception as e:
            logger.error(f"Failed to set virtual camera format: {e}")
            raise

    def speak(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ TTS —Å–µ—Ä–≤–µ—Ä."""
        try:
            requests.post(self.tts_url, json={"text": text}, timeout=2, verify=False)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–∑–≤—É—á–∫—É: '{text}'")
        except requests.exceptions.RequestException as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ TTS-—Å–µ—Ä–≤–µ—Ä—É: {e}")

    def _can_send_photo(self, animal_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        current_time = time.time()
        
        if animal_type == "dog":
            return current_time - self.last_dog_photo_time >= self.photo_interval
        elif animal_type == "cat":
            return current_time - self.last_cat_photo_time >= self.photo_interval
        
        return False

    def _send_pet_photo(self, frame, animal_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º –≤ Telegram"""
        if not self.telegram_bot or not self._can_send_photo(animal_type):
            return

        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–¥—Ä –≤ JPEG
            success, encoded_image = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
            
            if not success:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            image_bytes = encoded_image.tobytes()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            if animal_type == "dog":
                emoji = "üêï"
                caption = f"{emoji} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–±–∞–∫–∞! {timestamp}"
                filename = f"dog_detection_{int(time.time())}.jpg"
            elif animal_type == "cat":
                emoji = "üê±"
                caption = f"{emoji} –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ç! {timestamp}"
                filename = f"cat_detection_{int(time.time())}.jpg"
            else:
                return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            result = self.telegram_bot.send_photo_from_bytes(
                image_bytes, 
                filename, 
                caption
            )
            
            if result.get("ok"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
                if animal_type == "dog":
                    self.last_dog_photo_time = time.time()
                elif animal_type == "cat":
                    self.last_cat_photo_time = time.time()
                
                logger.info(f"–§–æ—Ç–æ —Å {animal_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {animal_type} –≤ Telegram: {result.get('error', 'Unknown error')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {animal_type} –≤ Telegram: {e}")

    def _send_pet_notification(self, animal_type: str, confidence: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∏—Ç–æ–º—Ü–µ"""
        if not self.telegram_bot:
            return
            
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            if animal_type == "dog":
                emoji = "üêï"
                message = f"{emoji} –í–Ω–∏–º–∞–Ω–∏–µ! –ñ—É–∂–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ {timestamp}\n–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence:.2f}"
            elif animal_type == "cat":
                emoji = "üê±"
                message = f"{emoji} –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ç –≤ {timestamp}\n–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence:.2f}"
            else:
                return
            
            result = self.telegram_bot.send_text_message(message)
            
            if result.get("ok"):
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {animal_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {animal_type}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {animal_type}: {e}")

    def _process_and_write_frame(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞: –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∑–∞–ø–∏—Å—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É"""
        ret, frame = self.cap.read()
        if not ret:
            return

        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 0.007843, (300, 300), 127.5)
        self.net.setInput(blob)
        detections = self.net.forward()
        
        # –§–ª–∞–≥–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        is_dog_in_current_frame = False
        is_cat_in_current_frame = False
        dog_detected_in_this_frame = False
        cat_detected_in_this_frame = False
        max_dog_confidence = 0.0
        max_cat_confidence = 0.0

        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.5:
                idx = int(detections[0, 0, i, 1])
                class_name = self.CLASSES[idx]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±–∞–∫–∏
                if class_name == "dog":
                    is_dog_in_current_frame = True
                    max_dog_confidence = max(max_dog_confidence, confidence)
                    if not self.dog_detected_recently:
                        dog_detected_in_this_frame = True
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ç–∞
                elif class_name == "cat":
                    is_cat_in_current_frame = True
                    max_cat_confidence = max(max_cat_confidence, confidence)
                    if not self.cat_detected_recently:
                        cat_detected_in_this_frame = True

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
                box = detections[0, 0, i, 3:7] * [w, h, w, h]
                (startX, startY, endX, endY) = box.astype("int")
                label = f"{class_name}: {confidence:.2f}"
                
                # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
                if class_name == "dog":
                    color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–æ–±–∞–∫–∏
                elif class_name == "cat":
                    color = (255, 0, 0)  # –°–∏–Ω–∏–π –¥–ª—è –∫–æ—Ç–∞
                else:
                    color = (0, 255, 255)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                
                cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)
                cv2.putText(frame, label, (startX, startY - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # --- –õ–æ–≥–∏–∫–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Å–æ–±–∞–∫–∏ ---
        if is_dog_in_current_frame and not self.dog_detected_recently:
            self.speak("–ñ—É–∂–∞, –∂—É–∂–∞, —Å–∫–æ—Ä–µ–µ –∏–¥–∏ —Å—é–¥–∞!!!")
            self.dog_detected_recently = True
        
        # --- –õ–æ–≥–∏–∫–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è –∫–æ—Ç–∞ ---
        if is_cat_in_current_frame and not self.cat_detected_recently:
            self.speak("–ö–æ—Ç –∫–æ—Ç–∏–∫, –º–∏–ª—ã–π –∫–æ—Ç–∏–∫!")
            self.cat_detected_recently = True
        
        # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram ---
        if dog_detected_in_this_frame:
            self._send_pet_photo(frame, "dog")
        
        if cat_detected_in_this_frame:
            self._send_pet_photo(frame, "cat")
        
        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –µ—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–∞–¥—Ä–∞
        if not is_dog_in_current_frame:
            self.dog_detected_recently = False
            
        if not is_cat_in_current_frame:
            self.cat_detected_recently = False

        yuv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2YUV_I420)
        
        try:
            os.write(self.fd_out, yuv_frame.tobytes())
        except Exception as e:
            logger.error(f"Failed to write to virtual camera: {e}")
            self.stop()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.running = True
        logger.info("Starting virtual camera stream...")
        try:
            while self.running:
                self._process_and_write_frame()
                time.sleep(1/30)
        except KeyboardInterrupt:
            logger.info("KeyboardInterrupt received.")
        finally:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.running = False
        if self.cap and self.cap.isOpened():
            self.cap.release()
        if self.fd_out:
            os.close(self.fd_out)
        logger.info("Streaming stopped.")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    detector = VirtualCameraObjectDetector(
        width=640,
        height=480,
        input_device_index=0,
        output_device="/dev/video2",
        enable_telegram=True,
        photo_interval=30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    )
    
    try:
        detector.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
    finally:
        detector.stop()
