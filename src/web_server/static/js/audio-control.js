// static/js/audio-control.js

class AudioController {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è MP3 –Ω–∞ Raspberry Pi
        this.isPlaying = false;
        this.currentSound = null;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.baseUrl = '/audio';
        
        this.initializeButtons();
        console.log('AudioController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initializeButtons() {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        this.playSound1Btn = document.getElementById('playSound1');
        this.playSound2Btn = document.getElementById('playSound2');
        this.stopAllBtn = document.getElementById('stopAll');
        this.ttsInput = document.getElementById('ttsInput');
        this.speakBtn = document.getElementById('speakBtn');

        console.log('TTS —ç–ª–µ–º–µ–Ω—Ç—ã:', this.ttsInput, this.speakBtn);
        console.log('ttsInput –Ω–∞–π–¥–µ–Ω:', !!this.ttsInput);
        console.log('speakBtn –Ω–∞–π–¥–µ–Ω:', !!this.speakBtn);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
        if (!this.playSound1Btn || !this.playSound2Btn || !this.stopAllBtn) {
            console.error('–ù–µ –≤—Å–µ –∞—É–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM!');
            return;
        }

        // TTS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (this.speakBtn && this.ttsInput) {
            console.log('‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º TTS –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');
            
            this.speakBtn.addEventListener('click', () => {
                const text = this.ttsInput.value;
                console.log('üîä TTS –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, —Ç–µ–∫—Å—Ç:', text);
                if (text.trim()) {
                    this.speakText(text);
                    this.ttsInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                } else {
                    console.log('‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π');
                }
            });
            
            // Enter –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            this.ttsInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    console.log('‚å®Ô∏è Enter –Ω–∞–∂–∞—Ç –≤ TTS –ø–æ–ª–µ');
                    this.speakBtn.click();
                }
            });
        } else {
            console.error('‚ùå TTS —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM!');
        }
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.playSound1Btn.addEventListener('click', () => this.playSound('sound1'));
        this.playSound2Btn.addEventListener('click', () => this.playSound('sound2'));
        this.stopAllBtn.addEventListener('click', () => this.stopAll());

        console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    async sendAudioCommand(endpoint, data = {}) {
        try {
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ ${this.baseUrl}${endpoint}`);
            
            const response = await fetch(`${this.baseUrl}${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –∫–æ–º–∞–Ω–¥—ã:', error);
            return { status: 'error', message: error.message };
        }
    }

    // --- –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ MP3 ---

    async playSound(soundName) {
        console.log(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ MP3 –Ω–∞ Raspberry Pi: ${soundName}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ MP3
        if (this.isPlaying) {
            await this.stopLocalPlayback();
        }

        try {
            const result = await this.sendAudioCommand(`/play/${soundName}`);
            
            if (result && result.status === 'success') {
                this.isPlaying = true;
                this.currentSound = soundName;
                this.updateButtonStates();
                console.log(`MP3 ${soundName} –∏–≥—Ä–∞–µ—Ç –Ω–∞ Raspberry Pi`);
            } else {
                console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${soundName}:`, result.message);
                this.showError(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${soundName}`);
            }
        } catch (error) {
            console.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ ${soundName}:`, error);
            this.showError(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${soundName}`);
        }
    }

    async stopLocalPlayback() {
        console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MP3 –Ω–∞ Raspberry Pi');
        
        try {
            const result = await this.sendAudioCommand('/stop');
            
            if (result && result.status === 'success') {
                this.isPlaying = false;
                this.currentSound = null;
                console.log('–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        }
    }

    // --- Text-to-Speech ---

    async speakText(text) {
        if (!text || !text.trim()) {
            console.error('–ù–µ–ª—å–∑—è –æ–∑–≤—É—á–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
            return;
        }
        
        try {
            console.log(`–û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç: "${text}"`);
            
            const result = await this.sendAudioCommand('/speak', { text: text.trim() });
            
            if (result && result.status === 'success') {
                console.log('TTS –∑–∞–ø—É—â–µ–Ω –Ω–∞ Raspberry Pi');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            } else {
                console.error('–û—à–∏–±–∫–∞ TTS:', result.message);
                this.showError('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ TTS:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
        }
    }

    // --- –û–±—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---

    async stopAll() {
        console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ MP3
        if (this.isPlaying) {
            await this.stopLocalPlayback();
        }

        this.updateButtonStates();
        console.log('–í—Å–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    updateButtonStates() {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        document.querySelectorAll('.audio-button').forEach(btn => {
            btn.classList.remove('playing', 'recording');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MP3
        if (this.isPlaying && this.currentSound) {
            const btnId = this.currentSound === 'sound1' ? 'playSound1' : 'playSound2';
            const currentBtn = document.getElementById(btnId);
            if (currentBtn) {
                currentBtn.classList.add('playing');
            }
        }
    }

    showError(message) {
        console.error(message);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ–ø –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
        const originalText = this.stopAllBtn.textContent;
        this.stopAllBtn.textContent = '–û—à–∏–±–∫–∞!';
        this.stopAllBtn.style.backgroundColor = '#ff4444';
        
        setTimeout(() => {
            this.stopAllBtn.textContent = originalText;
            this.stopAllBtn.style.backgroundColor = '';
        }, 2000);
    }

    // --- –°—Ç–∞—Ç—É—Å –∏ –æ—Ç–ª–∞–¥–∫–∞ ---

    getStatus() {
        return {
            isPlaying: this.isPlaying,
            currentSound: this.currentSound
        };
    }

    async getServerStatus() {
        try {
            const response = await fetch(`${this.baseUrl}/status`);
            if (response.ok) {
                const status = await response.json();
                console.log('–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', status);
                return status;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioController...');
    
    setTimeout(() => {
        window.audioController = new AudioController();
        console.log('AudioController –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        
        // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
        window.audioController.getServerStatus();
    }, 100);
});
